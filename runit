#!/bin/bash

declare -a env_array
declare -a proc_name
declare -a proc_command
declare -a proc_color

proc_name=()
proc_command=()
proc_color=("\033[31m" "\E[32m" "\E[34m" "\E[35m" "\E[37m")

RUNIT_VERSION="1.0"

# ERROR
NOTEXIST_ENV=4000
NOTEXIST_PROC=4001


VALID_ENV=0
PROC_FILE="Procfile"
ENV_FILE=".env"
DEFAULT_PORT="8080"
DATE_FORMAT='+%Y-%m-%d|%H:%M:%S'
CHILD_SHELL=""
COMM_NUM=0
PORT=8080
CHECK=0

function usage() {
    echo "Usage: runit [-c] [-f procfile|Procfile] [-e envfile|.env]"
}

# $1:name + command对应的下标  $2:进程id
function log()
{
    date=`date +%H:%M:%S`

    index="$1"
    name="${proc_name["$index"]}"
    command="${proc_command["$index"]}"
    pid="$2"
    str="$date"" ""$name"" | ""$command"" started with pid ""$2"
    echo -e `echo "${proc_color[$index]}""$str""\033[0m"`
}

# -z:the value is empty
# -n:string isnot empty
# 接受参数若干

function verify()
{
    until [ -z "$1" ]
    do
        case "$1" in
            # 检测procfile文件
            "-c")
                CHECK=1
                #echo "check profile success"
            ;;

            # 寻求帮助
            "-h")
                usage
            ;;

            # 环境变量提示参数
            "-e")
                shift
                if [ -n "$1" ]
                then
                    ENV_FILE="$1"
                    load_env_file
                    if [[ "$?" != 0 ]];then
                        exit "$NOTEXIST_ENV"
                    fi
                else
                    usage
                    exit "$NOTEXIST_ENV"
                fi
            ;;

            # procfile提示参数
            "-f")
                shift
                if [ -n "$1" ]
                then
                    PROC_FILE="$1"
                    run_procfile
                else
                    usage
                    exit "$NOTEXIST_PROC"
                fi
            ;;
            * )
                usage
            ;;
        esac
        shift
    done

}


function run_command() {
    i=0
    while (( $i<$COMM_NUM ))
    do
        bash -c "${proc_command[i]}" &
        if [[ ${proc_command[i]} == "echo \$PORT" ]];then
            let PORT++
        fi
        let i++
    done
}


function load_env_file() {

    if [ -e "$ENV_FILE" ];then
        while read line;do
            if [[ -n "$line" ]] && [[ $line != \#* ]]
            then
                #r 为截取的key值，不得含有之外的字符
                r=`echo "${line%=*}" | grep '[^0-9A-Za-z_]'`

                # env_value中不得含有空格
                env_value=${line#*=}
                res=`echo "${line#*=}" | grep '[[:space:]]'`

                if [[ -z "$env_value" ]] || [[ "$env_value" == "$line" ]] || [[ -n "$res" ]] || [[ -n "$r" ]];then
                    echo "invaild env: $line"
                else
                    eval export "$line"
                    if [[ "$?" == 0 ]];then
                        VALID_ENV=1
                    else
                        echo "invaild env: $line"
                    fi
                fi
            fi
        done < ${ENV_FILE}
    fi
}



#用来计数有效的命令
function run_procfile() {
    i=0
    if [ -e "$PROC_FILE" ];then
        while read line;do
            if [[ -n "$line" ]] && [[ $line != \#* ]]
            then
                res=`echo "${line%%:*}" | grep '[^0-9A-Za-z_]'`
                if [[ ${line%%:*} == $line ]] || [[ -n "$res" ]]
                then
                    echo "error command: $line"
                else
                    proc_name[i]=`echo ${line%%:*}`
                    proc_command[i]=`echo ${line#*:}`

                    let i++
                fi
            fi
        done < ${PROC_FILE}

        COMM_NUM="$i"
        handle_str
    fi

    if [[ $i == 0 ]];then
        exit $NOTEXIST_PROC
    fi
}


function handle_SIG()
{
    CHILD_SHELL=`jobs -p`
    for date in ${CHILD_SHELL[@]};do
        kill $date
        done
}


# 处理command字符串，必须接受全局变量NUMBER，即从PROCFILE中读得的命令数
# 逐个处理，如果有&符号，去掉
function handle_str()
{
    i=0
    while (( $i<$COMM_NUM ))
    do
        temp_str="${proc_command[i]}"
        if [[ "${temp_str:(-1)}" == "&" ]];then
            comm_len=${#temp_str}
            let comm_len--
            proc_command[i]="${temp_str:0:$comm_len}"
        fi
        let i++
    done
}



trap 'handle_SIG' SIGINT
trap 'handle_SIG' SIGTERM


function main() {
    verify "$@"

    echo ${proc_name[*]}
    echo ${proc_command[*]}

    if [[ $COMM_NUM != 0 ]];then
        run_command
    fi

    wait

    if [[  $CHECK == 1 ]] && [[ $VALID_ENV == 0 ]];then
        exit "$NOTEXIST_ENV"
    fi

}

main "$@"
